1.
Instância v1 
Passo 1:
i = 4, j varia de 0 a 3
Comparação: v[0] = 7 > v[1] = 2 (Verdadeiro) -> Troca
Novo vetor: {2, 7, 5, 4, 9}
Comparação: v[1] = 7 > v[2] = 5 (Verdadeiro) -> Troca
Novo vetor: {2, 5, 7, 4, 9}
Comparação: v[2] = 7 > v[3] = 4 (Verdadeiro) -> Troca
Novo vetor: {2, 5, 4, 7, 9}
Comparação: v[3] = 7 > v[4] = 9 (Falso) -> Não troca

Passo 2:
i = 3, j varia de 0 a 2
Comparação: v[0] = 2 < v[1] = 5 (Verdadeiro) -> Não troca
Comparação: v[1] = 5 > v[2] = 4 (Verdadeiro) -> Troca
Novo vetor: {2, 4, 5, 7, 9}
Comparação: v[2] = 5 < v[3] = 7 (Verdadeiro) -> Não troca
Comparação: v[3] = 7 < v[4] = 9 (Verdadeiro) -> Não troca

Passo 3:
i = 2, j varia de 0 a 1
Comparação: v[0] = 2 < v[1] = 4 (Verdadeiro) -> Não troca
Comparação: v[1] = 4 < v[2] = 5 (Verdadeiro) -> Não troca
Comparação: v[2] = 5 < v[3] = 7 (Verdadeiro) -> Não troca

Passo 4:
i = 1, j = 0
Comparação: v[0] = 2 < v[1] = 4 (Verdadeiro) -> Não troca

Instância v2
Passo 1:
i = 4, j varia de 0 a 3
Comparação: v[0] = 7 > v[1] = 5 (Verdadeiro) -> Troca
Novo vetor: {5, 7, 5, 3, 9}
Comparação: v[1] = 7 < v[2] = 5 (Falso) -> Não troca
Comparação: v[2] = 7 > v[3] = 3 (Verdadeiro) -> Troca
Novo vetor: {5, 5, 7, 3, 9}
Comparação: v[3] = 7 > v[4] = 9 (Falso) -> Não troca

Passo 2:
i = 3, j varia de 0 a 2
Comparação: v[0] = 5 < v[1] = 5 (Falso) -> Não troca
Comparação: v[1] = 5 > v[2] = 7 (Falso) -> Não troca
Comparação: v[2] = 7 > v[3] = 3 (Verdadeiro) -> Troca
Novo vetor: {5, 5, 3, 7, 9}
Comparação: v[3] = 7 < v[4] = 9 (Verdadeiro) -> Não troca

Passo 3:
i = 2, j varia de 0 a 1
Comparação: v[0] = 5 < v[1] = 5 (Falso) -> Não troca
Comparação: v[1] = 5 > v[2] = 3 (Verdadeiro) -> Troca
Novo vetor: {5, 3, 5, 7, 9}
Comparação: v[2] = 5 < v[3] = 7 (Verdadeiro) -> Não troca

Passo 4:
i = 1, j = 0
Comparação: v[0] = 5 > v[1] = 3 (Verdadeiro) -> Troca
Novo vetor: {3, 5, 5, 7, 9}

Instância v3
Passo 1:
i = 3, j varia de 0 a 2
Comparação: v[0] = 1 < v[1] = 2 (Verdadeiro) -> Não troca
Comparação: v[1] = 2 < v[2] = 3 (Verdadeiro) -> Não troca
Comparação: v[2] = 3 < v[3] = 4 (Verdadeiro) -> Não troca

Passo 2:
i = 2, j varia de 0 a 1
Comparação: v[0] = 1 < v[1] = 2 (Verdadeiro) -> Não troca
Comparação: v[1] = 2 < v[2] = 3 (Verdadeiro) -> Não troca

Passo 3:
i = 1, j = 0
Comparação: v[0] = 1 < v[1] = 2 (Verdadeiro) -> Não troca

Instância v4
Passo 1:
i = 3, j varia de 0 a 2
Comparação: v[0] = 4 > v[1] = 3 (Verdadeiro) -> Troca
Novo vetor: {3, 4, 2, 1}
Comparação: v[1] = 4 > v[2] = 2 (Verdadeiro) -> Troca
Novo vetor: {3, 2, 4, 1}
Comparação: v[2] = 4 > v[3] = 1 (Verdadeiro) -> Troca
Novo vetor: {3, 2, 1, 4}

Passo 2:
i = 2, j varia de 0 a 1
Comparação: v[0] = 3 > v[1] = 2 (Verdadeiro) -> Troca
Novo vetor: {2, 3, 1, 4}
Comparação: v[1] = 3 > v[2] = 1 (Verdadeiro) -> Troca
Novo vetor: {2, 1, 3, 4}

Passo 3:
i = 1, j = 0
Comparação: v[0] = 2 > v[1] = 1 (Verdadeiro) -> Troca
Novo vetor: {1, 2, 3, 4}


2.
12 comparações e 5 trocas.

3.
Os números de comparações e trocas necessárias de do código bubble são bem maiores se comparados ao selection, tudo por conta da implementação.

4.
#include <stdio.h>

void troca(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void bubbleRecursivo(int *v, int n) {
    if (n == 1)
        return;

    for (int i = 0; i < n - 1; i++) {
        if (v[i] > v[i + 1]) {
            troca(&v[i], &v[i + 1]);
        }
    }

    bubbleRecursivo(v, n - 1);
}

int main() {
    int v[] = {7, 2, 5, 4, 9};
    int n = sizeof(v) / sizeof(v[0]);

    printf("Vetor original: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", v[i]);
    }
    printf("\n");

    bubbleRecursivo(v, n);

    printf("Vetor ordenado: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", v[i]);
    }
    printf("\n");

    return 0;
}
