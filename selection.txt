1.

Instância v1: {7, 2, 5, 4, 9}
Passo 1:

Estado inicial: {7, 2, 5, 4, 9}
i = 0, menor = 0
Para j = 1, 2, 3, 4:
Comparação: 2 < 7, então menor = 1
Comparação: 5 < 2, não entra
Comparação: 4 < 2, não entra
Comparação: 9 < 2, não entra
Troca v[menor] = v[1] com v[i] = v[0]: {2, 7, 5, 4, 9}
Passo 2:

Estado atual: {2, 7, 5, 4, 9}
i = 1, menor = 2
Para j = 2, 3, 4:
Comparação: 5 < 7, então menor = 2
Comparação: 4 < 5, então menor = 3
Comparação: 9 < 4, não entra
Troca v[menor] = v[3] com v[i] = v[1]: {2, 4, 5, 7, 9}
Passo 3:

Estado atual: {2, 4, 5, 7, 9}
i = 2, menor = 2
Para j = 3, 4:
Comparação: 7 < 5, não entra
Comparação: 9 < 5, não entra
O vetor está ordenado. Não são necessários mais passos.

Instância v2: {7, 5, 5, 3, 9}
Passo 1:

Estado inicial: {7, 5, 5, 3, 9}
i = 0, menor = 0
Para j = 1, 2, 3, 4:
Comparação: 5 < 7, então menor = 1
Comparação: 5 = 5, então menor permanece 1
Comparação: 3 < 5, então menor = 3
Comparação: 9 < 3, não entra
Troca v[menor] = v[3] com v[i] = v[0]: {3, 5, 5, 7, 9}
Passo 2:

Estado atual: {3, 5, 5, 7, 9}
i = 1, menor = 1
Para j = 2, 3, 4:
Comparação: 5 = 5, então menor permanece 1
Comparação: 5 < 7, então menor permanece 1
Comparação: 9 < 5, não entra
O vetor está ordenado. Não são necessários mais passos.

Instância v3: {1, 2, 3, 4}
Nenhum passo é necessário, pois o vetor já está ordenado.

Instância v4: {4, 3, 2, 1}
Passo 1:

Estado inicial: {4, 3, 2, 1}
i = 0, menor = 0
Para j = 1, 2, 3:
Comparação: 3 < 4, então menor = 1
Comparação: 2 < 3, então menor = 2
Comparação: 1 < 2, então menor = 3
Troca v[menor] = v[3] com v[i] = v[0]: {1, 3, 2, 4}
Passo 2:

Estado atual: {1, 3, 2, 4}
i = 1, menor = 2
Para j = 2, 3:
Comparação: 2 < 3, então menor = 2
Comparação: 4 < 2, não entra
Troca v[menor] = v[2] com v[i] = v[1]: {1, 2, 3, 4}
Passo 3:

Estado atual: {1, 2, 3, 4}
i = 2, menor = 2
Para j = 3:
Comparação: 4 < 3, não entra
O vetor está ordenado. Não são necessários mais passos.

2.
Ocorre um erro de acesso invélido à memória.

3.
A ordenação pelo algoritmo de seleção não garante a manutenção da ordem relativa dos elementos iguais. Apenas olhando o código, pois depende da implementação.

4.
Nenhuma em v3 e 2 em v4.

5.
#include <iostream>
using namespace std;

void troca(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void selection(int *v, int n) {
    for (int i = 0; i < n - 1; i++) {
        int maior = i;
        for (int j = i + 1; j < n; j++) {
            if (v[j] > v[maior]) {
                maior = j;
            }
        }
        if (v[maior] != v[i]) {
            troca(&v[maior], &v[i]);
        }
    }
}

int main() {
    int v[] = {7, 2, 5, 4, 9};
    int n = sizeof(v) / sizeof(v[0]);

    selection(v, n);

    cout << "Vetor ordenado de forma decrescente: ";
    for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
    cout << endl;

    return 0;
}




